// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator nexusPrisma {
    provider = "nexus-prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum AccountType {
    TRADITIONAL
    WALLET
}

model Account {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime?
    owner     String      @unique // EOA address
    authUid   String?     @unique // Firebase Auth uid
    type      AccountType
    stations  Station[]
}

// Station is similar to channel on YouTube
model Station {
    id              String           @id @default(cuid())
    tokenId         Int?             @unique // Station NFT token id
    createdAt       DateTime         @default(now())
    updatedAt       DateTime?
    owner           String // EOA Address
    name            String           @unique @db.VarChar(64)
    displayName     String           @unique @db.VarChar(64)
    image           String? // Image url
    imageRef        String? // Image ref for use to delete the image
    bannerImage     String?
    bannerImageRef  String?
    defaultColor    String?
    account         Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String
    preferences     Category[]       @default([])
    followers       Follow[]         @relation("Follower")
    following       Follow[]         @relation("Following")
    publishes       Publish[]
    likes           Like[]
    disLikes        DisLike[]
    sentTips        Tip[]            @relation("Sent")
    receivedTips    Tip[]            @relation("Received")
    comments        Comment[]
    commentLikes    CommentLike[]
    commentDisLikes CommentDisLike[]
    watchLater      WatchLater[]
    playlists       Playlist[]
    dontRecommends  DontRecommend[]
    reports         Report[]
}

model Follow {
    createdAt   DateTime @default(now())
    follower    Station  @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   Station  @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String

    @@id([followerId, followingId])
}

enum Category {
    Music
    Movies
    Entertainment
    Sports
    Food
    Travel
    Gaming
    News
    Animals
    Education
    Science
    Technology
    Programming
    AI
    LifeStyle
    Vehicles
    Children
    Women
    Men
    Other
}

enum PublishKind {
    Video
    Ads
    Blog
    Podcast
    Short
}

// A model for the link to playback a publish typed video
model PlaybackLink {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    videoId   String
    thumbnail String // Thumbnail image
    preview   String // Preview url
    duration  Float // Duration
    hls       String // Playback url - hls
    dash      String // Playback url - dash
    publish   Publish?  @relation(fields: [publishId], references: [id], onDelete: Cascade)
    publishId String    @unique
}

// A model for the blog of a publish typed blog
model Blog {
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    publish   Publish?  @relation(fields: [publishId], references: [id], onDelete: Cascade)
    publishId String    @unique
    content   Json
}

enum ThumbnailSource {
    generated
    custom
}

enum Visibility {
    draft
    private
    public
}

model Publish {
    id                String          @id @default(cuid())
    createdAt         DateTime        @default(now())
    updatedAt         DateTime?
    creator           Station         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId         String
    contentURI        String? // A url of the raw file in cloud storage
    contentRef        String? // A reference path to the raw file in cloud storage
    filename          String?
    thumbnail         String? // A video thumbnail
    thumbnailRef      String? // A reference path in cloud storage
    thumbSource       ThumbnailSource @default(generated)
    title             String?         @db.VarChar(128)
    description       String?         @db.VarChar(5000)
    views             Int             @default(0)
    primaryCategory   Category?
    secondaryCategory Category?
    kind              PublishKind?
    visibility        Visibility      @default(draft)
    tags              String[]        @default([])
    uploadError       Boolean         @default(false)
    transcodeError    Boolean         @default(false)
    uploading         Boolean         @default(false)
    deleting          Boolean         @default(false)
    playback          PlaybackLink?
    likes             Like[]
    dislikes          DisLike[]
    tips              Tip[]
    comments          Comment[]       @relation("MainComment")
    watchLater        WatchLater[]
    playlistItems     PlaylistItem[]
    reported          Report[]
    blog              Blog?
}

// Publish's Like
model Like {
    createdAt DateTime @default(now())
    station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
    stationId String
    publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
    publishId String

    @@unique(fields: [stationId, publishId], name: "identifier")
}

// Publish's DisLike
model DisLike {
    createdAt DateTime @default(now())
    publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
    publishId String
    station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
    stationId String

    @@unique(fields: [publishId, stationId], name: "identifier")
}

// Publish' tip
model Tip {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    sender     Station  @relation("Sent", fields: [senderId], references: [id])
    senderId   String // Sender station id
    from       String // Sender address
    publish    Publish  @relation(fields: [publishId], references: [id])
    publishId  String
    receiver   Station  @relation("Received", fields: [receiverId], references: [id])
    receiverId String // Receiver station id
    to         String // Receiver address
    amount     String // Use String for ether amount
    fee        String // Use String for ether amount
}

enum CommentType {
    PUBLISH
    COMMENT
}

// Publish's Comment
model Comment {
    id          String           @id @default(cuid())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime?
    creator     Station          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String
    publish     Publish          @relation("MainComment", fields: [publishId], references: [id], onDelete: Cascade) // The publish that the comment belongs to.
    publishId   String
    comment     Comment?         @relation("SubComment", fields: [commentId], references: [id], onDelete: Cascade)
    // A comment that the comment belongs to, if `null` it means the comment was made on a publish directly, otherwise it was made on a comment.
    commentId   String?
    comments    Comment[]        @relation("SubComment") // The child comments
    content     String
    commentType CommentType
    likes       CommentLike[]
    disLikes    CommentDisLike[]
}

// Comment's Like
model CommentLike {
    createdAt DateTime @default(now())
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
    stationId String

    @@unique(fields: [commentId, stationId], name: "identifier")
}

// Comment's DisLike
model CommentDisLike {
    createdAt DateTime @default(now())
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
    stationId String

    @@unique(fields: [commentId, stationId], name: "identifier")
}

// Watch later table
model WatchLater {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
    stationId String
    publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
    publishId String
}

model Playlist {
    id          String         @id @default(cuid())
    createdAt   DateTime       @default(now())
    updatedAt   DateTime?      @default(now())
    name        String         @db.VarChar(120)
    description String?        @db.VarChar(2000)
    ownerId     String // Station id who owns the playlist
    owner       Station        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    items       PlaylistItem[]

    @@unique(fields: [name, ownerId], name: "identifier")
}

model PlaylistItem {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    ownerId    String // A station id who owns the item
    playlistId String
    playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    publishId  String
    publish    Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)

    @@unique(fields: [playlistId, publishId], name: "identifier")
}

model DontRecommend {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    requestorId String
    targetId    String
    target      Station  @relation(fields: [targetId], references: [id])

    @@unique(fields: [requestorId, targetId], name: "identifier")
}

enum ReportReason {
    adult
    violent
    harass
    hateful
    harmful
    abuse
    terrorism
    spam
    mislead
}

model Report {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    submittedById String
    submittedBy   Station      @relation(fields: [submittedById], references: [id], onDelete: Cascade)
    publishId     String
    publish       Publish      @relation(fields: [publishId], references: [id], onDelete: Cascade)
    reason        ReportReason

    @@unique(fields: [submittedById, publishId, reason], name: "identifier")
}
