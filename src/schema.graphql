### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  authUid: String
  createdAt: DateTime!
  defaultStation: Station
  id: ID!
  owner: String!
  stations: [Station!]!
  type: AccountType!
  updatedAt: DateTime
}

enum AccountType {
  TRADITIONAL
  WALLET
}

input AddToPlaylistInput {
  accountId: String!
  owner: String!
  playlistId: String!
  publishId: String!
  stationId: String!
}

input AddToWatchLaterInput {
  accountId: String!
  owner: String!
  publishId: String!
  stationId: String!
}

input CacheSessionInput {
  accountId: String!
  address: String!
  stationId: String!
}

type CalculateTipsResult {
  tips: Int!
}

enum Category {
  Animals
  Children
  Education
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

input CheckPublishPlaylistsInput {
  accountId: String!
  owner: String!
  publishId: String!
  stationId: String!
}

type CheckPublishPlaylistsResponse {
  isInWatchLater: Boolean!
  items: [PlaylistItem!]!
  publishId: String!
}

type Comment {
  comment: Comment
  commentId: String
  commentType: CommentType!
  comments: [Comment!]!
  commentsCount: Int!
  content: String!
  createdAt: DateTime!
  creator: Station!
  creatorId: String!
  disLiked: Boolean
  disLikes: [CommentDisLike!]!
  disLikesCount: Int!
  id: ID!
  liked: Boolean
  likes: [CommentLike!]!
  likesCount: Int!
  publish: Publish!
  publishId: String!
  updatedAt: DateTime
}

type CommentDisLike {
  comment: Comment!
  commentId: String!
  station: Station!
  stationId: String!
}

type CommentEdge {
  cursor: String
  node: Comment
}

type CommentLike {
  comment: Comment!
  commentId: String!
  station: Station!
  stationId: String!
}

input CommentPublishInput {
  accountId: String!
  commentId: String
  commentType: CommentType!
  content: String!
  owner: String!
  publishId: String!
  stationId: String!
}

enum CommentType {
  COMMENT
  PUBLISH
}

input CreateDraftPublishInput {
  accountId: String!
  creatorId: String!
  filename: String!
  owner: String!
}

type CreateDraftPublishResult {
  filename: String
  id: String!
}

input CreatePlayListInput {
  accountId: String!
  name: String!
  owner: String!
  publishId: String!
  stationId: String!
}

input CreateStationInput {
  accountId: String!
  name: String!
  owner: String!
  tokenId: Int!
}

input CreateTipInput {
  amount: String!
  fee: String!
  from: String!
  publishId: String!
  receiverId: String!
  senderId: String!
  to: String!
}

type CreateWalletResult {
  address: String!
  uid: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DisLike {
  createdAt: DateTime!
  publish: Publish!
  publishId: String!
  station: Station!
  stationId: String!
}

type DontRecommend {
  createdAt: DateTime!
  requestorId: String!
  target: Station!
  targetId: String!
}

type DontRecommendEdge {
  cursor: String
  node: DontRecommend
}

input DontRecommendInput {
  accountId: String!
  owner: String!
  stationId: String!
  targetId: String!
}

input FetchCommentsByPublishIdInput {
  cursor: String
  publishId: String!
  requestorId: String
}

type FetchCommentsResponse {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

input FetchDontRecommendsInput {
  accountId: String!
  cursor: String
  owner: String!
  requestorId: String!
}

type FetchDontRecommendsResponse {
  edges: [DontRecommendEdge!]!
  pageInfo: PageInfo!
}

input FetchMyPlaylistsInput {
  accountId: String!
  cursor: String
  owner: String!
  stationId: String!
}

input FetchMyPublishesInput {
  accountId: String!
  creatorId: String!
  cursor: String
  kind: QueryPublishKind!
  owner: String!
}

type FetchPlaylistsResponse {
  edges: [PlaylistEdge!]!
  pageInfo: PageInfo!
}

input FetchPublishesByCatInput {
  category: Category!
  cursor: String
  requestorId: String
}

input FetchPublishesInput {
  cursor: String
  prefer: [Category!]
  requestorId: String
}

type FetchPublishesResponse {
  edges: [PublishEdge!]!
  pageInfo: PageInfo!
}

input FetchWatchLaterInput {
  accountId: String!
  cursor: String
  owner: String!
  stationId: String!
}

type FetchWatchLaterResponse {
  edges: [WatchLaterEdge!]!
  pageInfo: PageInfo!
}

type Follow {
  follower: Station!
  followerId: String!
  following: Station!
  followingId: String!
}

input GetMyAccountInput {
  accountType: AccountType!
}

type Like {
  createdAt: DateTime!
  publish: Publish!
  publishId: String!
  station: Station!
  stationId: String!
}

input LikePublishInput {
  accountId: String!
  owner: String!
  publishId: String!
  stationId: String!
}

input MintStationNFTInput {
  accountId: String!
  name: String!
  to: String!
}

type MintStationNFTResult {
  tokenId: Int!
}

type Mutation {
  addToNewPlaylist(input: CreatePlayListInput!): WriteResult
  addToPlaylist(input: AddToPlaylistInput!): WriteResult
  addToWatchLater(input: AddToWatchLaterInput!): WriteResult
  cacheSession(input: CacheSessionInput!): WriteResult!
  calculateTips(qty: Int!): CalculateTipsResult
  comment(input: CommentPublishInput!): WriteResult
  createAccount(input: GetMyAccountInput!): Account
  createDraftPublish(input: CreateDraftPublishInput!): CreateDraftPublishResult
  createStation(input: CreateStationInput!): Station
  createTip(input: CreateTipInput!): Tip
  disLikePublish(input: LikePublishInput!): WriteResult
  dontRecommend(input: DontRecommendInput!): WriteResult
  likePublish(input: LikePublishInput!): WriteResult
  mintFirstStationNFT(input: MintStationNFTInput!): MintStationNFTResult
  mintStationNFT(input: MintStationNFTInput!): MintStationNFTResult
  removeDontRecommend(input: DontRecommendInput!): WriteResult
  removeFromWatchLater(input: RemoveFromWatchLaterInput!): WriteResult
  reportPublish(input: ReportPublishInput!): WriteResult
  sendTips(input: SendTipsInput!): SendTipsResult
  updateBannerImage(input: UpdateImageInput!): WriteResult
  updateDisplayName(input: UpdateDisplayNameInput!): WriteResult
  updatePlaylists(input: UpdatePlaylistsInput!): WriteResult
  updateProfileImage(input: UpdateImageInput!): WriteResult
  updatePublish(input: UpdatePublishInput!): Publish
  validateDisplayName(name: String!): Boolean
  validateName(name: String!): Boolean
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type PlaybackLink {
  createdAt: DateTime!
  dash: String!
  duration: Float!
  hls: String!
  id: ID!
  preview: String!
  publish: Publish
  publishId: String!
  thumbnail: String!
  updatedAt: DateTime
  videoId: String!
}

type Playlist {
  createdAt: DateTime!
  id: ID!
  items: [PlaylistItem!]!
  name: String!
  owner: Station!
  ownerId: String!
}

type PlaylistEdge {
  cursor: String
  node: Playlist
}

type PlaylistItem {
  createdAt: DateTime!
  id: ID!
  playlist: Playlist!
  playlistId: String!
  publish: Publish!
  publishId: String!
}

input PlaylistItemStatus {
  isInPlaylist: Boolean!
  playlistId: String!
}

type Publish {
  comments: [Comment]!
  commentsCount: Int!
  contentRef: String
  contentURI: String
  createdAt: DateTime!
  creator: Station!
  creatorId: String!
  description: String
  disLiked: Boolean
  disLikesCount: Int!
  dislikes: [DisLike!]!
  filename: String
  id: ID!
  kind: PublishKind
  lastComment: Comment
  liked: Boolean
  likes: [Like!]!
  likesCount: Int!
  playback: PlaybackLink
  primaryCategory: Category
  secondaryCategory: Category
  thumbSource: ThumbnailSource!
  thumbnail: String
  thumbnailRef: String
  tips: [Tip]!
  tipsCount: Int!
  title: String
  transcodeError: Boolean!
  updatedAt: DateTime
  uploadError: Boolean!
  uploading: Boolean!
  views: Int!
  visibility: Visibility!
}

type PublishEdge {
  cursor: String
  node: Publish
}

enum PublishKind {
  Adds
  Blog
  Podcast
  Short
  Video
}

type Query {
  checkPublishPlaylists(input: CheckPublishPlaylistsInput!): CheckPublishPlaylistsResponse
  fetchAllVideos(input: FetchPublishesInput!): FetchPublishesResponse
  fetchCommentsByPublishId(input: FetchCommentsByPublishIdInput!): FetchCommentsResponse
  fetchDontRecommends(input: FetchDontRecommendsInput!): FetchDontRecommendsResponse
  fetchMyPlaylists(input: FetchMyPlaylistsInput!): FetchPlaylistsResponse
  fetchMyPublishes(input: FetchMyPublishesInput!): FetchPublishesResponse
  fetchVideosByCategory(input: FetchPublishesByCatInput!): FetchPublishesResponse
  fetchWatchLater(input: FetchWatchLaterInput!): FetchWatchLaterResponse
  getBalance(address: String!): String!
  getMyAccount(input: GetMyAccountInput!): Account
  getPublishById(input: QueryByIdInput!): Publish
  getStationById(input: QueryByIdInput!): Station
  getStationByName(input: QueryByNameInput!): Station
}

input QueryByIdInput {
  requestorId: String
  targetId: String!
}

input QueryByNameInput {
  name: String!
  requestorId: String
}

enum QueryPublishKind {
  adds
  all
  blogs
  podcasts
  videos
}

input RemoveFromWatchLaterInput {
  accountId: String!
  id: String
  owner: String!
  publishId: String!
  stationId: String!
}

type Report {
  createdAt: DateTime!
  id: ID!
  publish: Publish!
  publishId: String!
  reason: ReportReason!
  submittedBy: Station!
  submittedById: String!
}

input ReportPublishInput {
  accountId: String!
  owner: String!
  publishId: String!
  reason: ReportReason!
  stationId: String!
}

enum ReportReason {
  abuse
  adult
  harass
  harmful
  hateful
  mislead
  spam
  terrorism
  violent
}

input SendTipsInput {
  publishId: String!
  qty: Int!
  receiverId: String!
  senderId: String!
}

type SendTipsResult {
  amount: String!
  fee: String!
  from: String!
  to: String!
}

type Station {
  account: Account!
  accountId: String!
  bannerImage: String
  bannerImageRef: String
  createdAt: DateTime!
  defaultColor: String
  displayName: String!
  followersCount: Int!
  followingCount: Int!
  id: ID!
  image: String
  imageRef: String
  isFollowing: Boolean
  isOwner: Boolean
  name: String!
  owner: String!
  publishes: [Publish!]!
  publishesCount: Int!
  tokenId: Int
  updatedAt: DateTime
  watchLater: [WatchLater!]!
}

enum ThumbSource {
  custom
  generated
}

enum ThumbnailSource {
  custom
  generated
}

type Tip {
  amount: String!
  createdAt: DateTime!
  fee: String!
  from: String!
  id: ID!
  publish: Publish!
  publishId: String!
  receiver: Station!
  receiverId: String!
  sender: Station!
  senderId: String!
  to: String!
}

input UpdateDisplayNameInput {
  accountId: String!
  name: String!
  owner: String!
  stationId: String!
}

input UpdateImageInput {
  accountId: String!
  image: String!
  imageRef: String!
  owner: String!
  stationId: String!
}

input UpdatePlaylistsInput {
  accountId: String!
  owner: String!
  playlists: [PlaylistItemStatus!]!
  publishId: String!
  stationId: String!
}

input UpdatePublishInput {
  accountId: String!
  contentRef: String
  contentURI: String
  description: String
  kind: PublishKind
  owner: String!
  primaryCategory: Category
  publishId: String!
  secondaryCategory: Category
  stationId: String!
  thumbSource: ThumbSource!
  thumbnail: String
  thumbnailRef: String
  title: String
  visibility: Visibility
}

enum Visibility {
  draft
  private
  public
}

type WatchLater {
  createdAt: DateTime!
  id: ID!
  publish: Publish!
  publishId: String!
  station: Station!
  stationId: String!
}

type WatchLaterEdge {
  cursor: String
  node: WatchLater
}

type WriteResult {
  status: String!
}