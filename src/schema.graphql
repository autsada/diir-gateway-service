### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  authUid: String
  createdAt: DateTime!
  defaultStation: Station
  id: String!
  owner: String!
  stations: [Station]
  type: AccountType!
  updatedAt: DateTime
}

enum AccountType {
  TRADITIONAL
  WALLET
}

type AuthUser {
  uid: String!
}

input CacheSessionInput {
  accountId: String!
  address: String!
  stationId: String!
}

type CalculateTipsResult {
  tips: Int!
}

enum Category {
  Animals
  Children
  Education
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

type Comment {
  commentId: String
  commentType: CommentType!
  commentsCount: Int!
  content: String!
  createdAt: DateTime!
  creator: Station
  creatorId: String!
  disLiked: Boolean
  disLikesCount: Int!
  id: String!
  liked: Boolean
  likes: [Station]!
  likesCount: Int!
  publishId: String!
  updatedAt: DateTime
}

enum CommentType {
  COMMENT
  PUBLISH
}

input CreateDraftPublishInput {
  accountId: String!
  creatorId: String!
  filename: String!
  owner: String!
}

type CreateDraftPublishResult {
  filename: String
  id: String!
}

input CreateStationInput {
  accountId: String!
  name: String!
  owner: String!
  tokenId: Int!
}

input CreateTipInput {
  amount: String!
  fee: String!
  from: String!
  publishId: String!
  receiverId: String!
  senderId: String!
  to: String!
}

type CreateWalletResult {
  address: String!
  uid: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DraftPublish {
  createdAt: DateTime!
  creatorId: String!
  filename: String!
  id: String!
  public: Boolean!
  transcodeError: Boolean!
  uploadError: Boolean!
  uploading: Boolean!
}

type Edge {
  cursor: String
  node: Station
}

input GetMyAccountInput {
  accountType: AccountType!
}

input MintStationNFTInput {
  accountId: String!
  name: String!
  to: String!
}

type MintStationNFTResult {
  tokenId: Int!
}

type Mutation {
  cacheSession(input: CacheSessionInput!): WriteResult!
  calculateTips(qty: Int!): CalculateTipsResult
  createAccount(input: GetMyAccountInput!): Account
  createDraftPublish(input: CreateDraftPublishInput!): CreateDraftPublishResult
  createStation(input: CreateStationInput!): Station
  createTip(input: CreateTipInput!): Tip
  createUser(address: String!): AuthUser
  mintFirstStationNFT(input: MintStationNFTInput!): MintStationNFTResult
  mintStationNFT(input: MintStationNFTInput!): MintStationNFTResult
  sendTips(input: SendTipsInput!): SendTipsResult
  updateBannerImage(input: UpdateImageInput!): WriteResult
  updateDisplayName(input: UpdateDisplayNameInput!): WriteResult
  updateProfileImage(input: UpdateImageInput!): WriteResult
  updatePublish(input: UpdatePublishInput!): Publish
  validateDisplayName(name: String!): Boolean
  validateName(name: String!): Boolean
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type PlaybackLink {
  createdAt: DateTime!
  dash: String!
  duration: Float!
  hls: String!
  id: String!
  preview: String!
  publishId: String!
  thumbnail: String!
  updatedAt: DateTime
}

type Publish {
  commentsCount: Int!
  createdAt: DateTime!
  creator: Station
  creatorId: String!
  description: String
  disLiked: Boolean
  disLikesCount: Int!
  filename: String
  id: String!
  kind: PublishKind
  lastComment: Comment
  liked: Boolean
  likes: [Station]!
  likesCount: Int!
  playback: PlaybackLink
  primaryCategory: Category
  public: Boolean!
  rawContentURI: String
  secondaryCategory: Category
  thumbSource: ThumbSource!
  thumbnail: String
  tips: [Tip]!
  tipsCount: Int!
  title: String
  transcodeError: Boolean!
  updatedAt: DateTime
  uploadError: Boolean!
  uploading: Boolean!
  views: Int
}

enum PublishKind {
  Adds
  Blog
  Podcast
  Short
  Video
}

type Query {
  fetchPublishes: [Publish]!
  getBalance(address: String!): String!
  getMyAccount(input: GetMyAccountInput!): Account
  getPublishById(id: String!): Publish
  getPublishForCreator(id: String!): Publish
  getStationById(input: QueryByIdInput!): Station
  getStationByName(input: QueryByNameInput!): Station
  listCommentsByCommentId(input: QueryByIdInput!): [Comment]!
  listCommentsByPublishId(input: QueryByIdInput!): [Comment]!
}

input QueryByIdInput {
  requestorId: String
  targetId: String!
}

input QueryByNameInput {
  name: String!
  requestorId: String
}

type Response {
  edges: [Edge]!
  pageInfo: PageInfo!
}

input SendTipsInput {
  publishId: String!
  qty: Int!
  receiverId: String!
  senderId: String!
}

type SendTipsResult {
  amount: String!
  fee: String!
  from: String!
  to: String!
}

type Station {
  account: Account
  accountId: String!
  bannerImage: String
  bannerImageRef: String
  createdAt: DateTime!
  defaultColor: String
  displayName: String!
  followers: [Station!]!
  followersCount: Int!
  following: [Station]!
  followingCount: Int!
  id: String!
  image: String
  imageRef: String
  isFollowing: Boolean
  isOwner: Boolean
  name: String!
  owner: String!
  publishes: [Publish]
  publishesCount: Int!
  tokenId: Int
  updatedAt: DateTime
}

enum ThumbSource {
  custom
  generated
}

type Tip {
  amount: String!
  createdAt: DateTime!
  fee: String!
  from: String!
  id: String!
  publish: Publish
  publishId: String!
  receiver: Station
  receiverId: String!
  sender: Station
  senderId: String!
  to: String!
}

input UpdateDisplayNameInput {
  accountId: String!
  name: String!
  owner: String!
  stationId: String!
}

input UpdateImageInput {
  accountId: String!
  image: String!
  imageRef: String!
  owner: String!
  stationId: String!
}

input UpdatePublishInput {
  accountId: String!
  description: String
  isPublic: Boolean
  kind: PublishKind
  owner: String!
  primaryCategory: Category
  publishId: String!
  secondaryCategory: Category
  thumbSource: ThumbSource
  thumbnail: String
  title: String
}

type WriteResult {
  status: String!
}